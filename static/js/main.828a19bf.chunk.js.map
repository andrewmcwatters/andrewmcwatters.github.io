{"version":3,"sources":["components/Header/logo.svg","components/Header/index.js","components/Footer/index.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Header","props","to","src","logo","alt","Footer","className","Home","lazy","NoMatch","App","Fragment","fallback","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,mTCgB5BC,MAVf,SAAgBC,GACd,OAAO,gCACL,2BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAKC,IAAMC,IAAI,a,OCDbC,MAPf,SAAgBL,GACd,OAAO,gCACL,2BAAOM,UAAU,cAAjB,qECEEC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAUD,gBAAK,kBAAM,gCAmBZE,E,uKAfX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,yBAAKN,UAAU,cACjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOQ,UAAWN,MAGtB,kBAAC,EAAD,W,GAXUO,aCCZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCrEjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGHC,SAASC,eAAe,SDIZ,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,GAAN,sBAEP7B,IAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,MAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAqB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OC/BxBmC,K","file":"static/js/main.828a19bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.07bd009d.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from './logo.svg';\r\nimport './Header.css';\r\n// import Nav from '../Nav';\r\n\r\nfunction Header(props) {\r\n  return <header>\r\n    <p>\r\n      <Link to=\"/\">\r\n        <img src={logo} alt=\"ACPM\" />\r\n      </Link>\r\n    </p>\r\n  </header>;\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Footer(props) {\r\n  return <footer>\r\n    <small className=\"text-muted\">Copyright Â© 2010-2020 Andrew McWatters. All\r\n    rights reserved.</small>\r\n  </footer>;\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Suspense, lazy } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Footer from './components/Footer';\r\n\r\nconst Home = lazy(() => import('./routes/Home'));\r\nconst NoMatch = lazy(() => import('./routes/NoMatch'));\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header></Header>\r\n        <Suspense fallback={<div className=\"Suspense\"></div>}>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route component={NoMatch} />\r\n          </Switch>\r\n        </Suspense>\r\n        <Footer></Footer>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport ReactDOM from 'react-dom';\r\n// Bootstrap and its default variables\r\nimport \"./bootstrap.css\";\r\nimport './index.css';\r\nimport './theme.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render((\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n), document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}